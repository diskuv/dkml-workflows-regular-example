# setup-dkml
#   Short form: sd4

name: setup-dkml
author: Diskuv, Inc.
description: Build OCaml native executables for Linux

# WARNING: The inputs.*.default seem to do nothing!
# 2022-10-21: Unclear if warning still applies after move from a GitHub child workflow to a GitHub composite action
inputs:
  FDOPEN_OPAMEXE_BOOTSTRAP:
    description: "Use opam.exe from fdopen on Windows. Typically only used when bootstrapping Opam for the first time. May be needed to solve '\"create_process\" failed on sleep: Bad file descriptor' which may need https://github.com/ocaml/opam/commit/417b97d8cfada35682a0f4107eb2e4f9e24fba91"
    required: false
    default: 'false'
  CACHE_PREFIX:
    description: The prefix of the cache keys.
    required: false
    default: "v1"
  OCAML_COMPILER:
    description: "The version of the OCaml compiler, as tagged by the https://github.com/diskuv/dkml-base-compiler repository. If not specified the latest compiler, or the version associated with the 'dkml-compiler' input, is used. Currently only 4.12.1 is supported"
    required: false
  DKML_COMPILER:
    description: "Git branch, tag or commit for dkml-compiler. However if OCAML_COMPILER is specified the 'dkml-base-compiler' version is taken from OCAML_COMPILER."
    required: false
    default: "" # "@repository@" = Opam ; "" = latest from default branch of git clone
  CONF_DKML_CROSS_TOOLCHAIN:
    description: "Git branch, tag or commit for conf-dkml-cross-toolchain"
    required: false
    default: "@repository@" # "@repository@" = Opam ; "" = latest from default branch of git clone
  DISKUV_OPAM_REPOSITORY:
    description: "Git branch, tag or commit for diskuv-opam-repository"
    required: false
    default: "" # DEFAULT_DISKUV_OPAM_REPOSITORY_TAG is used as default for empty strings
  VERBOSE:
    description: "Turn on verbose logging"
    required: false
    default: 'true'

runs:
  using: "composite"

  steps:
    - name: Full matrix variables
      shell: bash
      # Every matrix variable lookup in this Action should use the output of this step. Even
      # the matrix variables that the user must specify (ex. dkml_host_abi) should be
      # referenced using [steps.full_matrix_vars.outputs.dkml_host_abi] rather than
      # [matrix.dkml_host_abi] so that there is a single place to edit for variable changes.
      id: full_matrix_vars
      run: |
        # Select correct Linux matrix variables
        case "${{ matrix.dkml_host_abi }}" in
        
        linux_x86)
          abi_pattern='manylinux2014-linux_x86';
          gh_os='ubuntu-latest';
          comment='(CentOS 7, etc.)';
          gh_unix_shell='sh';
          bootstrap_opam_version='2.2.0-dkml20220801T155940Z';
          dkml_host_abi='linux_x86';
          opam_root='.ci/o';
          in_docker='true';
          dockcross_image='dockcross/manylinux2014-x86';
          dockcross_run_extra_args='--platform linux/386' ;;
          
        linux_x86_64)
          abi_pattern='manylinux2014-linux_x86_64';
          gh_os='ubuntu-latest';
          comment='(CentOS 7, etc.)';
          gh_unix_shell='sh';
          bootstrap_opam_version='2.2.0-dkml20220801T155940Z';
          dkml_host_abi='linux_x86_64';
          opam_root='.ci/o';
          dockcross_image='dockcross/manylinux2014-x64';
          in_docker='true' ;;
          
        *)  echo "FATAL: Unsupported dkml_host_abi=$dkml_host_abi in Linux action.yml"; exit 107 ;;
        esac

        add() {
          echo "$1=$2" | tee -a $GITHUB_OUTPUT | tee -a $GITHUB_ENV
        }

        add dkml_host_abi "$dkml_host_abi"
        add abi_pattern "$abi_pattern"
        add opam_root "$opam_root"
        add exe_ext "${exe_ext:-}"
        add bootstrap_opam_version "${bootstrap_opam_version:-}"
        add ocaml_options "${ocaml_options:-}"

        add dockcross_image "${dockcross_image:-}"
        add dockcross_run_extra_args "${dockcross_run_extra_args:-}"
        add docker_runner "${docker_runner:-}"
        add in_docker "${in_docker:-}"

        #   GitHub Actions uses Docker Buildx, so use custom 'dkml-dockcross/*' cached image which speeds up builds
        add dockcross_image_custom_prefix "dkml-"

    - name: Write POSIX shell and AWK scripts
      shell: bash
      run: |
        install -d .ci/sd4

        cat > .ci/sd4/common-values.sh <<'end_of_script'
        #!/bin/sh
        
        # ------------------------ Log Formatting ------------------------
        
        TXT_SECTION="\e[94m" # bright blue
        TXT_CLEAR="\e[0m"
        
        if [ "${GITLAB_CI:-}" = "true" ]; then
            # https://docs.gitlab.com/ee/ci/jobs/#expand-and-collapse-job-log-sections
            print_section_start() {
                print_section_start_NAME=$1
                shift
                printf "\e[0Ksection_start:%s:%s[collapsed=true]\r\e[0K" \
                    "$(date +%s)" \
                    "$print_section_start_NAME"
            }
            print_section_end() {
                print_section_end_NAME=$1
                shift
                printf "\e[0Ksection_end:%s:%s\r\e[0K\n" \
                    "$(date +%s)" \
                    "$print_section_end_NAME"
            }
        else
            print_section_start() {
                print_section_start_NAME=$1
                shift
            }
            print_section_end() {
                print_section_end_NAME=$1
                shift
            }
        fi
        
        section_begin() {
            # https://docs.gitlab.com/ee/ci/yaml/script.html#add-color-codes-to-script-output
            section_NAME=$1
            shift
            section_HEADER=$1
            shift
            print_section_start "$section_NAME"
            printf "${TXT_SECTION}%s${TXT_CLEAR}\n" "$section_HEADER"
        }
        
        section_end() {
            section_NAME=$1
            shift
            print_section_end "$section_NAME"
        }
        
        end_of_script

        cat > .ci/sd4/run-checkout-code.sh <<'end_of_script'
        #!/bin/sh
        
        # ================
        # checkout-code.sh
        # ================
        #
        # Checkouts all of the git source code.
        #
        # This should be done outside of
        # dockcross (used by Linux) since a Docker-in-Docker container can have
        # difficulties doing a git checkout (the Git credentials for any private
        # repositories are likely not present). We don't care about any private
        # repositories for DKML but any code that extends this (ex. DKSDK) may
        # need to use private repositories.
        
        set -euf
        
        setup_WORKSPACE_VARNAME=$1
        shift
        setup_WORKSPACE=$1
        shift
        
        # ------------------------ Functions ------------------------
        
        # shellcheck source=./common-values.sh
        . .ci/sd4/common-values.sh
        
        # Disable automatic garbage collection
        git_disable_gc() {
            git_disable_gc_NAME=$1
            shift
            git -C ".ci/sd4/g/$git_disable_gc_NAME" config --local gc.auto 0
        }
        
        # Mimic the behavior of GitHub's actions/checkout@v3
        # - the plus symbol in 'git fetch ... origin +REF:refs/tags/v0.0' overrides any existing REF
        git_checkout() {
            git_checkout_NAME=$1
            shift
            git_checkout_URL=$1
            shift
            git_checkout_REF=$1
            shift
        
            if [ -e ".ci/sd4/g/$git_checkout_NAME" ]; then
                git_disable_gc "$git_checkout_NAME"
                git -C ".ci/sd4/g/$git_checkout_NAME" remote set-url origin "$git_checkout_URL"
                git -C ".ci/sd4/g/$git_checkout_NAME" fetch --no-tags --progress --no-recurse-submodules --depth=1 origin "+${git_checkout_REF}:refs/tags/v0.0"
            else
                install -d ".ci/sd4/g/$git_checkout_NAME"
                git -C ".ci/sd4/g/$git_checkout_NAME" -c init.defaultBranch=main init
                git_disable_gc "$git_checkout_NAME"
                git -C ".ci/sd4/g/$git_checkout_NAME" remote add origin "$git_checkout_URL"
                git -C ".ci/sd4/g/$git_checkout_NAME" fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin "+${git_checkout_REF}:refs/tags/v0.0"
            fi
            git -C ".ci/sd4/g/$git_checkout_NAME" -c advice.detachedHead=false checkout --progress --force refs/tags/v0.0
            git -C ".ci/sd4/g/$git_checkout_NAME" log -1 --format='%H'
        }
        
        # ---------------------------------------------------------------------
        
        section_begin checkout-info "Summary: code checkout"
        
        # shellcheck disable=SC2154
        echo "
        ================
        checkout-code.sh
        ================
        .
        ---------
        Arguments
        ---------
        WORKSPACE_VARNAME=$setup_WORKSPACE_VARNAME
        WORKSPACE=$setup_WORKSPACE
        .
        ------
        Inputs
        ------
        VERBOSE=${VERBOSE:-}
        .
        ------
        Matrix
        ------
        dkml_host_abi=$dkml_host_abi
        .
        "
        
        section_end checkout-info
        
        install -d .ci/sd4/g
        
        # dkml-runtime-distribution
        
        case "$dkml_host_abi" in
        windows_*)
            section_begin checkout-dkml-runtime-distribution 'Checkout dkml-runtime-distribution'
            git_checkout dkml-runtime-distribution https://github.com/diskuv/dkml-runtime-distribution.git "1a3ec82dd851751a95e6a4797387a8163c51520e"
            section_end checkout-dkml-runtime-distribution
            ;;
        esac
        
        end_of_script

        cat > .ci/sd4/run-setup-dkml.sh <<'end_of_script'
        #!/bin/sh
        set -euf
        
        # Constants
        SHA512_DEVNULL='cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'
        #   Edited by https://gitlab.com/diskuv/diskuv-ocaml/contributors/release.sh
        DEFAULT_DISKUV_OPAM_REPOSITORY_TAG=36bb91955f0dc5b5710239834f6fcda1db43c221
        # Constants
        #   Should be edited by release.sh, but ...
        #   Can't be 1.0.0 or later until https://github.com/ocaml/opam-repository/pull/21704 ocaml-option-32bit
        #   can come back in.
        DKML_VERSION=0.4.0
        
        
        setup_WORKSPACE_VARNAME=$1
        shift
        setup_WORKSPACE=$1
        shift
        
        # ------------------------ Functions ------------------------
        
        # shellcheck source=./common-values.sh
        . .ci/sd4/common-values.sh
        
        if [ "${VERBOSE:-}" = "true" ]; then
            do_tar_rf() {
                tar rvf "$@"
            }
        else
            do_tar_rf() {
                tar rf "$@"
            }
        fi
        
        # Make the standard input work as an OCaml string.
        # This currently only escapes backslashes and double quotes.
        escape_arg_as_ocaml_string() {
            escape_arg_as_ocaml_string_ARG=$1
            shift
            printf "%s" "$escape_arg_as_ocaml_string_ARG" | sed 's#\\#\\\\#g; s#"#\\"#g;'
        }
        
        # ---------------------------------------------------------------------
        
        # fixup opam_root on Windows to be mixed case
        opam_root_original=$opam_root
        if [ -x /usr/bin/cygpath ]; then
            opam_root=$(/usr/bin/cygpath -am "$opam_root")
        fi
        
        # load VS studio environment
        if [ -e .ci/sd4/vsenv.sh ]; then
            # shellcheck disable=SC1091
            . .ci/sd4/vsenv.sh
        fi
        
        section_begin setup-info "Summary: setup-dkml"
        
        # shellcheck disable=SC2154
        echo "
        =============
        setup-dkml.sh
        =============
        .
        ---------
        Arguments
        ---------
        WORKSPACE_VARNAME=$setup_WORKSPACE_VARNAME
        WORKSPACE=$setup_WORKSPACE
        .
        ------
        Inputs
        ------
        FDOPEN_OPAMEXE_BOOTSTRAP=${FDOPEN_OPAMEXE_BOOTSTRAP:-}
        DISKUV_OPAM_REPOSITORY=${DISKUV_OPAM_REPOSITORY:-}
        DKML_COMPILER=${DKML_COMPILER:-}
        OCAML_COMPILER=${OCAML_COMPILER:-}
        CONF_DKML_CROSS_TOOLCHAIN=${CONF_DKML_CROSS_TOOLCHAIN:-}
        VERBOSE=${VERBOSE:-}
        .
        -------------------
        Generated Constants
        -------------------
        DKML_VERSION=$DKML_VERSION
        DEFAULT_DISKUV_OPAM_REPOSITORY_TAG=$DEFAULT_DISKUV_OPAM_REPOSITORY_TAG
        DEFAULT_DKML_COMPILER=$DEFAULT_DKML_COMPILER
        .
        ------
        Matrix
        ------
        dkml_host_abi=$dkml_host_abi
        bootstrap_opam_version=$bootstrap_opam_version
        abi_pattern=$abi_pattern
        opam_root=${opam_root}
        opam_root_original=${opam_root_original}
        dockcross_image=${dockcross_image:-}
        dockcross_image_custom_prefix=${dockcross_image_custom_prefix:-}
        dockcross_run_extra_args=${dockcross_run_extra_args:-}
        docker_runner=${docker_runner:-}
        in_docker=${in_docker:-}
        ocaml_options=${ocaml_options:-}
        .
        ----
        Pins
        ----
        PIN_BASE=${PIN_BASE}
        PIN_BIGSTRINGAF=${PIN_BIGSTRINGAF}
        PIN_CORE_KERNEL=${PIN_CORE_KERNEL}
        PIN_CTYPES=${PIN_CTYPES}
        PIN_CTYPES_FOREIGN=${PIN_CTYPES_FOREIGN}
        PIN_CURLY=${PIN_CURLY}
        PIN_DIGESTIF=${PIN_DIGESTIF}
        PIN_DUNE=${PIN_DUNE}
        PIN_DUNE=${PIN_DUNE}
        PIN_OCAMLBUILD=${PIN_OCAMLBUILD}
        PIN_OCAMLFIND=${PIN_OCAMLFIND}
        PIN_OCP_INDENT=${PIN_OCP_INDENT}
        PIN_PPX_EXPECT=${PIN_PPX_EXPECT}
        PIN_PTIME=${PIN_PTIME}
        PIN_TIME_NOW=${PIN_TIME_NOW}
        .
        "
        case "$dkml_host_abi" in
        windows_*)
            # shellcheck disable=SC2153
            echo "
        -------------
        Visual Studio
        -------------
        VS_DIR=$VS_DIR
        VS_VCVARSVER=$VS_VCVARSVER
        VS_WINSDKVER=$VS_WINSDKVER
        VS_MSVSPREFERENCE=$VS_MSVSPREFERENCE
        VS_CMAKEGENERATOR=$VS_CMAKEGENERATOR
        .
        "
            ;;
        esac
        section_end setup-info
        
        do_bootstrap() {
            # Bootstrap from historical release
            runit_BOOTSTRAPPED=0
        
            #   Bootstrap Opam from fdopen (Windows)
            if [ "$runit_BOOTSTRAPPED" = 0 ] && [ "${FDOPEN_OPAMEXE_BOOTSTRAP:-}" = "true" ]; then
                if [ -e .ci/sd4/opam64/bin/opam.exe ] && [ -e .ci/sd4/opam64/bin/opam-installer.exe ]; then
                    runit_BOOTSTRAPPED=1
                else
                    case "$dkml_host_abi" in
                    windows_*)
                        echo 'Bootstrap Opam from fdopen (Windows) ...'
                        install -d .ci/sd4/bs/bin
                        wget -O "$setup_WORKSPACE"/.ci/sd4/opam64.tar.xz https://github.com/fdopen/opam-repository-mingw/releases/download/0.0.0.2/opam64.tar.xz
        
                        # this stalls: tar xvCfJ "$setup_WORKSPACE"/.ci/sd4 "$setup_WORKSPACE"/.ci/sd4/opam64.tar.xz
                        xz -v -d "$setup_WORKSPACE"/.ci/sd4/opam64.tar.xz
                        tar xvCf .ci/sd4 .ci/sd4/opam64.tar
        
                        rm -rf "$setup_WORKSPACE"/.ci/sd4/bs/bin/Opam.Runtime.amd64
                        mv -v "$setup_WORKSPACE"/.ci/sd4/opam64/bin/Opam.Runtime.amd64/ "$setup_WORKSPACE"/.ci/sd4/bs/bin/
                        mv -v "$setup_WORKSPACE"/.ci/sd4/opam64/bin/opam.exe "$setup_WORKSPACE"/.ci/sd4/bs/bin/
                        mv -v "$setup_WORKSPACE"/.ci/sd4/opam64/bin/opam-installer.exe "$setup_WORKSPACE"/.ci/sd4/bs/bin/
        
                        # diagnostics
                        ldd "$setup_WORKSPACE"/.ci/sd4/bs/bin/opam.exe
                        ldd "$setup_WORKSPACE"/.ci/sd4/bs/bin/opam-installer.exe
        
                        runit_BOOTSTRAPPED=1
                        ;;
                    esac
                fi
            fi
        
            #   Bootstrap from historical release
            if [ "$runit_BOOTSTRAPPED" = 0 ] && [ "$bootstrap_opam_version" != "os" ]; then
                install -d .ci/sd4/bs
                cd .ci/sd4/bs
        
                if [ ! -e version ] || [ "$(cat version)" != "$bootstrap_opam_version" ]; then
                    echo 'Bootstrap Opam from historical release (non-Windows; Windows non-fdopen) ...'
                    if command -v curl; then
                        curl -L -o opam.tar.gz "https://github.com/diskuv/dkml-component-opam/releases/download/v${bootstrap_opam_version}/dkml-component-staging-opam.tar.gz"
                    else
                        wget -O opam.tar.gz "https://github.com/diskuv/dkml-component-opam/releases/download/v${bootstrap_opam_version}/dkml-component-staging-opam.tar.gz"
                    fi
                    tar tvfz opam.tar.gz
                    tar xfz opam.tar.gz "./staging-files/${dkml_host_abi}/"
                    rm -rf bin/
                    mv "staging-files/${dkml_host_abi}/bin" .
                    rm -rf "${abi_pattern}"
                    printf "%s" "${bootstrap_opam_version}" >version
                fi
        
                rm -f opam.tar.gz
                cd ../../..
        
                runit_BOOTSTRAPPED=1
            fi
        
            #   Bootstrap from package manager or GitHub ocaml/opam release
            case "$runit_BOOTSTRAPPED,$bootstrap_opam_version,$dkml_host_abi" in
            0,os,darwin_*)
                if ! command -v opam; then
                    echo 'Bootstrap Opam from package manager (macOS) ...'
                    brew install gpatch
                    brew install opam
                fi
                runit_BOOTSTRAPPED=1
                ;;
            0,os,linux_x86)
                if [ ! -x .ci/sd4/bs/bin/opam ]; then
                    echo 'Bootstrap Opam from GitHub ocaml/opam release (Linux x86) ...'
                    install -d .ci/sd4/bs/bin
                    wget -O .ci/sd4/bs/bin/opam.tmp https://github.com/ocaml/opam/releases/download/2.1.2/opam-2.1.2-i686-linux
                    sha512_check=$(openssl sha512 2>&1 </dev/null | cut -f 2 -d ' ')
                    if [ "$SHA512_DEVNULL" = "$sha512_check" ]; then
                        sha512=$(openssl sha512 ".ci/sd4/bs/bin/opam.tmp" 2>/dev/null | cut -f 2 -d ' ')
                        check="85a480d60e09a7d37fa0d0434ed97a3187434772ceb4e7e8faa5b06bc18423d004af3ad5849c7d35e72dca155103257fd6b1178872df8291583929eb8f884b6a"
                        test "$sha512" = "$check"
                        chmod +x .ci/sd4/bs/bin/opam.tmp
                        mv .ci/sd4/bs/bin/opam.tmp .ci/sd4/bs/bin/opam
                    else
                        echo "openssl 512 option unsupported."
                        exit 61
                    fi
                fi
                runit_BOOTSTRAPPED=1
                ;;
            0,os,linux_x86_64)
                if [ ! -x .ci/sd4/bs/bin/opam ]; then
                    echo 'Bootstrap Opam from GitHub ocaml/opam release (Linux x86_64) ...'
                    install -d .ci/sd4/bs/bin
                    wget -O .ci/sd4/bs/bin/opam.tmp https://github.com/ocaml/opam/releases/download/2.1.2/opam-2.1.2-x86_64-linux
                    sha512_check=$(openssl sha512 2>&1 </dev/null | cut -f 2 -d ' ')
                    if [ "$SHA512_DEVNULL" = "$sha512_check" ]; then
                        sha512=$(openssl sha512 ".ci/sd4/bs/bin/opam.tmp" 2>/dev/null | cut -f 2 -d ' ')
                        check="c0657ecbd4dc212587a4da70c5ff0402df95d148867be0e1eb1be8863a2851015f191437c3c99b7c2b153fcaa56cac99169c76ec94c5787750d7a59cd1fbb68b"
                        test "$sha512" = "$check"
                        chmod +x .ci/sd4/bs/bin/opam.tmp
                        mv .ci/sd4/bs/bin/opam.tmp .ci/sd4/bs/bin/opam
                    else
                        echo "openssl 512 option unsupported."
                        exit 61
                    fi
                fi
                runit_BOOTSTRAPPED=1
                ;;
            esac
        }
        section_begin bootstrap-opam 'Bootstrap Opam'
        do_bootstrap
        section_end bootstrap-opam
        
        # Start environment distribution tarball
        #   We use .tar rather than .tar.gz/.tar.bz2 because we can repeatedly add to an uncompressed .tar. But we need to
        #   start with an empty tarball since some tar programs will only add ('tar rf xyz.tar') to an existing .tar.
        install -d .ci/sd4/dist
        tar cf .ci/sd4/dist/env-opam.tar -T /dev/null
        
        if [ -n "${dockcross_image:-}" ]; then
            section_begin get-dockcross 'Get dockcross binary (ManyLinux)'
            install -d .ci/sd4
            #   shellcheck disable=SC2086
            docker run ${dockcross_run_extra_args:-} --rm "${dockcross_image_custom_prefix:-}${dockcross_image:-}" >.ci/sd4/dockcross.gen
        
            # Super-annoying stderr output from dockcross at line:
            #    tty -s && [ -z "$MSYS" ] && TTY_ARGS=-ti
            # When there is no tty, get:
            #   tty: ignoring all arguments
            #   not a tty
            # So replace 'tty -s &&' with 'false &&'
            sed 's/tty -s &&/false \&\&/' .ci/sd4/dockcross.gen >.ci/sd4/dockcross
            rm -f .ci/sd4/dockcross.gen
        
            chmod +x .ci/sd4/dockcross
        
            # Bundle for consumers of setup-dkml.yml
            do_tar_rf .ci/sd4/dist/env-opam.tar .ci/sd4/dockcross
        
            section_end get-dockcross
        
            # rsync needs to be available, even after Docker container disappears
            if [ ! -e .ci/sd4/bs/bin/rsync ]; then
                section_begin get-opam-prereqs-in-dockcross 'Get Opam prerequisites (ManyLinux)'
                install -d .ci/sd4/bs/bin
                #   shellcheck disable=SC2016
                .ci/sd4/dockcross --args "${dockcross_run_extra_args:-}" sh -c 'sudo yum install -y rsync && install $(command -v rsync) .ci/sd4/bs/bin'
                section_end get-opam-prereqs-in-dockcross
            fi
        fi
        
        # Opam prerequisites for using opam (not for installing opam)
        
        {
            if [ -n "${docker_runner:-}" ]; then
                # rsync needs to be available, even after Docker container disappears
                if [ ! -e .ci/sd4/bs/bin/rsync.deps ]; then
                    section_begin get-opam-prereqs-in-docker 'Get Opam prerequisites (Linux Docker)'
                    install -d .ci/sd4/bs/bin
                    ${docker_runner} sh -c '
                    apt-get update &&
                    apt-get install -y rsync &&
                    ldd /usr/bin/rsync &&
                    ls -l /lib/i386-linux-gnu/libpopt.so.0 /lib/i386-linux-gnu/libacl.so.1 /lib/i386-linux-gnu/libattr.so.1 &&
                    tar cCfhz / /work/.ci/sd4/bs/bin/deps.tar.gz /usr/bin/rsync /lib/i386-linux-gnu/libpopt.so.0
                '
                    touch .ci/sd4/bs/bin/rsync.deps
                    section_end get-opam-prereqs-in-docker
                fi
            fi
        
            # Bundle Opam prerequisites (ManyLinux or Linux Docker)
            if [ -n "${docker_runner:-}" ] || [ -n "${dockcross_image:-}" ]; then
                # Bundle for consumers of setup-dkml.yml
                do_tar_rf .ci/sd4/dist/env-opam.tar .ci/sd4/bs/bin/rsync
            fi
        }
        
        # Setup Opam
        
        do_write_opam_scripts() {
            case "${FDOPEN_OPAMEXE_BOOTSTRAP:-},$dkml_host_abi" in
            true,windows_*)
                # With fdopen's opam.exe, 'os-distribution = "cygwinports"'. But native Windows opam.exe has 'os-distribution = "win32"'.
                # But on Windows we always want MSYS2 or native Windows libraries, not Cygwin. If cygwinports then
                # code like https://github.com/ocaml/opam-repository/blob/08cbb8258bd4bf30cd6f307c958911a29d537b54/packages/conf-pkg-config/conf-pkg-config.2/opam#L36
                # will fail. So always set 'os-distribution = "win32"' on Windows.
                PATCH_OS_DISTRIBUTION_WIN32=true
                # With fdopen's opam.exe, no 'exe = ".exe"' is set because Cygwin does not need file extensions.
                # Native Windows requires a .exe extension.
                PATCH_EXE_WIN32=true
                ;;
            *)
                PATCH_OS_DISTRIBUTION_WIN32=false
                PATCH_EXE_WIN32=false
                ;;
            esac
        
            # ---------------------
            # Empty opam repository
            # ---------------------
        
            install -d .ci/sd4/eor
            cat >.ci/sd4/eor/repo <<EOF
        opam-version: "2.0"
        browse: "https://opam.ocaml.org/pkg/"
        upstream: "https://github.com/ocaml/opam-repository/tree/master/"
        EOF
        
            # ---------------
            # Create Opam troubleshooting script
            # ---------------
        
            cat >.ci/sd4/troubleshoot-opam.sh <<EOF
        #!/bin/sh
        set -euf
        OPAMROOT=\$1
        shift
        printf "\n\n========= [START OF TROUBLESHOOTING] ===========\n\n" >&2
        find "\$OPAMROOT"/log -mindepth 1 -maxdepth 1 -name "*.out" ! -name "log-*.out" ! -name "ocaml-variants-*.out" | while read -r dump_on_error_LOG; do
            dump_on_error_BLOG=\$(basename "\$dump_on_error_LOG")
            printf "\n\n========= [TROUBLESHOOTING] %s ===========\n\n" "\$dump_on_error_BLOG" >&2
            awk -v BLOG="\$dump_on_error_BLOG" '{print "[" BLOG "]", \$0}' "\$dump_on_error_LOG" >&2
        done
        printf "\nScroll up to see the [TROUBLESHOOTING] logs that begin at the [START OF TROUBLESHOOTING] line\n" >&2
        EOF
        
            chmod +x .ci/sd4/troubleshoot-opam.sh
            do_tar_rf .ci/sd4/dist/env-opam.tar .ci/sd4/troubleshoot-opam.sh
        
            # ---------------
            # Create Opam support scripts (not needed for all platforms)
            #   The PATH to find opam must work internally in setup-dkml.yml (sd4/bs/bin) and
            #   by consumers of setup-dkml.yml (sd4/opamexe)
            # ---------------
        
            USER_ID=$(id -u)
            GROUP_ID=$(id -g)
            USER_NAME=$(id -un)
            GROUP_NAME=$(id -gn)
        
            case "${opam_root}" in
            /* | ?:*) # /a/b/c or C:\Windows
                ;;
            *) # relative path
                cat >.ci/sd4/env-opam-real <<EOF
        #!/bin/sh
        set -euf
        export PATH="/work/.ci/sd4/bs/bin:/work/.ci/sd4/opamexe:\$PATH"
        export OPAMROOT=/work/${opam_root}
        export OPAMROOTISOK=1
        if [ "${PATCH_OS_DISTRIBUTION_WIN32}" = true ]; then export OPAMVAR_os_distribution=win32; fi
        if [ "${PATCH_EXE_WIN32}" = true ]; then export OPAMVAR_exe=.exe; fi
        
        echo "Running inside Docker container: \$*" >&2
        set +e
        "\$@"
        exitcode=\$?
        [ \$exitcode = 0 ] || "/work/.ci/sd4/troubleshoot-opam.sh" \$OPAMROOT
        exit \$exitcode
        EOF
                chmod +x .ci/sd4/env-opam-real
                ;;
            esac
        
            cat >.ci/sd4/env-opam-deescalate <<EOF
        #!/bin/sh
        set -euf
        
        if [ -e /work/.ci/sd4/bs/bin/deps.tar.gz ]; then
            tar xCfz / /work/.ci/sd4/bs/bin/deps.tar.gz
        fi
        
        groupadd -g ${GROUP_ID} ${GROUP_NAME}
        useradd -l -m -u ${USER_ID} -g ${GROUP_ID} ${USER_NAME}
        exec runuser -u ${USER_NAME} -g ${GROUP_NAME} -- "\$@"
        EOF
        
            chmod +x .ci/sd4/env-opam-deescalate
        
            # -----------------------------------
            # Create env-opam
            # -----------------------------------
        
            install -d .ci/sd4/dist
        
            if [ -x .ci/sd4/dockcross ]; then
                # Adding empty dockcross root volume avoids:
                #    cp: target ‘/home/root/’ is not a directory
                #    chown: cannot access ‘/home/root’: No such file or directory
                # from https://github.com/dockcross/dockcross/blob/96d87416f639af0204bdd42553e4b99315ca8476/imagefiles/entrypoint.sh#L31-L32
                install -d .ci/sd4/edr
        
                cat >.ci/sd4/env-opam <<EOF
        #!/bin/sh
        set -euf
        exec bash "\$${setup_WORKSPACE_VARNAME}"/.ci/sd4/dockcross --args "-v \$${setup_WORKSPACE_VARNAME}/.ci/sd4/edr:/home/root ${dockcross_run_extra_args:-}" /work/.ci/sd4/env-opam-real "\$@"
        EOF
                chmod +x .ci/sd4/env-opam
        
                # Bundle for consumers of setup-dkml.yml
                echo '__ env-opam-real __' >&2
                cat .ci/sd4/env-opam-real >&2
                echo '___________________' >&2
                do_tar_rf .ci/sd4/dist/env-opam.tar .ci/sd4/env-opam .ci/sd4/env-opam-real .ci/sd4/edr
        
            elif [ -n "${docker_runner:-}" ]; then
        
                cat >.ci/sd4/env-opam <<EOF
        #!/bin/sh
        set -euf
        exec ${docker_runner:-} /work/.ci/sd4/env-opam-deescalate /work/.ci/sd4/env-opam-real "\$@"
        EOF
                chmod +x .ci/sd4/env-opam
        
                # Bundle for consumers of setup-dkml.yml
                echo '__ env-opam-real __' >&2
                cat .ci/sd4/env-opam-real >&2
                echo '___________________' >&2
                echo '__ env-opam-deescalate __' >&2
                cat .ci/sd4/env-opam-deescalate >&2
                echo '_________________________' >&2
                do_tar_rf .ci/sd4/dist/env-opam.tar .ci/sd4/env-opam .ci/sd4/env-opam-real .ci/sd4/env-opam-deescalate
        
            else
        
                cat >.ci/sd4/env-opam <<EOF
        #!/bin/sh
        set -euf
        export PATH="\$${setup_WORKSPACE_VARNAME}/.ci/sd4/bs/bin:\$${setup_WORKSPACE_VARNAME}/.ci/sd4/opamexe:\$PATH"
        export OPAMROOT='${opam_root}'
        export OPAMROOTISOK=1
        if [ "${PATCH_OS_DISTRIBUTION_WIN32}" = true ]; then export OPAMVAR_os_distribution=win32; fi
        if [ "${PATCH_EXE_WIN32}" = true ]; then export OPAMVAR_exe=.exe; fi
        
        echo "Running: \$*" >&2
        set +e
        "\$@"
        exitcode=\$?
        [ \$exitcode = 0 ] || "\$${setup_WORKSPACE_VARNAME}/.ci/sd4/troubleshoot-opam.sh" \$OPAMROOT
        exit \$exitcode
        EOF
                chmod +x .ci/sd4/env-opam
        
                # Bundle for consumers of setup-dkml.yml
                do_tar_rf .ci/sd4/dist/env-opam.tar .ci/sd4/env-opam
        
            fi
            echo '__ env-opam __' >&2
            cat .ci/sd4/env-opam >&2
            echo '______________' >&2
        
            # -------
            # opamrun
            # -------
        
            install -d .ci/sd4/opamrun
            cat >.ci/sd4/opamrun/opamrun <<EOF
        #!/bin/sh
        set -euf
        
        # Add MSVC compiler environment if available
        if [ -e "\$${setup_WORKSPACE_VARNAME}/.ci/sd4/msvcenv" ]; then
            _oldpath="\$PATH"
            # shellcheck disable=SC1091
            . "\$${setup_WORKSPACE_VARNAME}/.ci/sd4/msvcenv"
            PATH="\$PATH:\$_oldpath"
        
            # MSVC (link.exe) needs a TMP as well.
            # Confer: https://docs.microsoft.com/en-us/cpp/build/reference/linking?view=msvc-170#link-environment-variables
            if [ -z "\${TMP:-}" ]; then
                # GitHub Actions as of 2022-10 does not set TMP. GitLab CI/CD does.
                TMP="\$RUNNER_TEMP"
            fi
            export TMP
            if [ -x /usr/bin/cygpath ]; then
                TMP=\$(/usr/bin/cygpath -aw "\$TMP")
            fi
        fi
        
        # Windows
        if [ -n "\${COMSPEC:-}" ]; then
            # We must place MSYS2 in front of path so that MSYS2
            # tar.exe is used instead of Windows tar.exe.
            PATH="/usr/bin:\$PATH"
        fi
        
        exec "\$${setup_WORKSPACE_VARNAME}/.ci/sd4/env-opam" opam "\$@"
        EOF
            chmod +x .ci/sd4/opamrun/opamrun
        
            # Bundle for consumers of setup-dkml.yml
            do_tar_rf .ci/sd4/dist/env-opam.tar .ci/sd4/opamrun
        }
        section_begin 'write-opam-scripts' 'Write and Distribute Opam scripts'
        do_write_opam_scripts
        section_end 'write-opam-scripts'
        
        # Expose opamrun (also used for consumers of setup-dkml.yml) to GitHub
        if [ -n "${GITHUB_PATH:-}" ]; then
            opamrunabs="$setup_WORKSPACE/.ci/sd4/opamrun"
            if [ -x /usr/bin/cygpath ]; then opamrunabs=$(/usr/bin/cygpath -aw "$opamrunabs"); fi
            echo "$opamrunabs" >>"$GITHUB_PATH"
            # Special case: GITHUB_PATH does not influence msys2.CMD of msys2/setup-msys2@v2, so place in real MSYS2 PATH
            if [ -n "${MSYSTEM:-}" ]; then
                install -d /usr/local/bin
                install .ci/sd4/opamrun/opamrun /usr/local/bin/opamrun
            fi
        fi
        
        # Place opamrun in the immediate PATH
        PATH="$setup_WORKSPACE/.ci/sd4/opamrun:$PATH"
        
        #   Complicated Opam sequence is because:
        #   1. Opam's default curl does not work on Windows,
        #      and `opam init` does not provide a way to change it (TODO: need
        #      a PR!).
        #   2. We have to separate the Opam download cache from the other Opam
        #      caches
        if [ ! -e "$opam_root/.ci.root-init" ]; then
            section_begin opam-init 'Initialize Opam root'
        
            # Clear any partial previous attempt
            rm -rf "$opam_root"
        
            case "$dkml_host_abi,${in_docker:-}" in
            windows_*,*)
                eor=$(cygpath -am "$setup_WORKSPACE"/.ci/sd4/eor)
                opamrun init --disable-sandboxing --no-setup --kind local --bare "$eor"
                case "$(opamrun --version)" in
                2.0.*) echo 'download-command: wget' >>"$opam_root/config" ;;
                *) opamrun option --yes --global download-command=wget ;;
                esac
                ;;
            *,true)
                opamrun init --disable-sandboxing --no-setup --kind local --bare "/work/.ci/sd4/eor"
                ;;
            *)
                opamrun init --disable-sandboxing --no-setup --kind local --bare "$setup_WORKSPACE/.ci/sd4/eor"
                ;;
            esac
            touch "$opam_root/.ci.root-init"
        
            section_end opam-init
        fi
        
        section_begin opam-vars "Opam variables"
        opamrun var --global || true
        section_end opam-vars
        
        # Build OCaml
        
        # `opam repository` operations need the Opam switches present to perform
        # updates, so this step comes after the Opam switch cache load but before the
        # initial Opam switch creation.
        
        section_begin opam-repo "Opam repository"
        
        if [ -x /usr/bin/cygpath ]; then
            if [ -n "${RUNNER_TEMP:-}" ]; then
                # GitHub Actions
                TEMP=$(cygpath -am "$RUNNER_TEMP")
            else
                # GitLab CI/CD
                install -d .ci/tmp
                TEMP=$(cygpath -am ".ci/tmp")
            fi
            export TEMP
        fi
        if [ ! -e "$opam_root/.ci.repo-init" ]; then
            opamrun repository remove default --yes --all --dont-select || true
            opamrun repository remove diskuv --yes --all --dont-select || true
            opamrun repository add default https://opam.ocaml.org --yes --dont-select
            opamrun repository add diskuv "git+https://github.com/diskuv/diskuv-opam-repository.git#${DISKUV_OPAM_REPOSITORY:-$DEFAULT_DISKUV_OPAM_REPOSITORY_TAG}" --yes --dont-select
            touch "$opam_root/.ci.repo-init"
        fi
        
        # Whether .ci.repo-init or not, always set the `diskuv` repository url since it can change
        opamrun repository set-url diskuv "git+https://github.com/diskuv/diskuv-opam-repository.git#${DISKUV_OPAM_REPOSITORY:-$DEFAULT_DISKUV_OPAM_REPOSITORY_TAG}" --yes --dont-select
        # Update both `default` and `diskuv` Opam repositories
        opamrun update default diskuv
        section_end opam-repo
        
        section_begin switch-create "Create Opam switch"
        # Create, or recreate, the Opam switch. The Opam switch should not be
        # cached except for the compiler (confer docs for setup-ocaml GitHub
        # Action) which is the 'dkml' switch
        # Check if the switch name is present in the Opam root (which may come from cache)
        NOMINALLY_PRESENT=false
        if opamrun switch list --short | grep '^dkml$'; then NOMINALLY_PRESENT=true; fi
        
        # Check if the switch is actually present in case of cache incoherence
        # or corrupt Opam state that could result in:
        #   Error:  No config file found for switch dkml. Switch broken?
        if [ $NOMINALLY_PRESENT = true ] && [ ! -e "$opam_root/dkml/.opam-switch/switch-config" ]; then
            # Remove the switch name from Opam root, and any partial switch state.
            # Ignore inevitable warnings/failure about missing switch.
            opamrun switch remove dkml --yes || true
            rm -rf "$opam_root/dkml"
            NOMINALLY_PRESENT=false
        fi
        
        if [ $NOMINALLY_PRESENT = false ]; then
            opamrun switch create dkml --repos diskuv,default --empty --yes
        fi
        section_end switch-create
        
        do_pins() {
            # dkml-base-compiler
        
            if [ "${DKML_COMPILER:-}" != '@repository@' ] && [ -z "${DKML_COMPILER:-}" ] && [ -z "${OCAML_COMPILER:-}" ]; then
                section_begin checkout-dkml-base-compiler "Pin dkml-base-compiler to default ${DEFAULT_DKML_COMPILER} (neither dkml-base-compiler nor OCAML_COMPILER specified)"
                opamrun pin add --yes --no-action dkml-base-compiler "https://github.com/diskuv/dkml-compiler.git#${DEFAULT_DKML_COMPILER}"
                section_end checkout-dkml-base-compiler
            elif [ "${DKML_COMPILER:-}" != '@repository@' ] && [ -n "${DKML_COMPILER:-}" ] && [ -z "${OCAML_COMPILER:-}" ]; then
                section_begin checkout-dkml-base-compiler "Pin dkml-base-compiler to $DKML_COMPILER (dkml-base-compiler specified; no OCAML_COMPILER specified)"
                opamrun pin add --yes --no-action dkml-base-compiler "https://github.com/diskuv/dkml-compiler.git#${DKML_COMPILER}"
                section_end checkout-dkml-base-compiler
            elif [ -n "${OCAML_COMPILER:-}" ]; then
                # Validate OCAML_COMPILER (OCAML_COMPILER specified)
                case "${OCAML_COMPILER:-}" in
                4.12.1) true ;;
                *)
                    echo "OCAML_COMPILER version ${OCAML_COMPILER:-} is not supported" >&2
                    exit 109
                    ;;
                esac
        
                section_begin checkoutdkml-base-compiler 'Pin dkml-base-compiler (OCAML_COMPILER specified)'
                opamrun pin add --yes --no-action dkml-base-compiler "https://github.com/diskuv/dkml-compiler.git#${OCAML_COMPILER}-v${DKML_VERSION}"
                section_end checkout-dkml-base-compiler
            fi
        
            # conf-dkml-cross-toolchain
        
            if [ "${CONF_DKML_CROSS_TOOLCHAIN:-}" != '@repository@' ]; then
                section_begin checkout-conf-dkml-cross-toolchain 'Pin conf-dkml-cross-toolchain'
                opamrun pin add --yes --no-action conf-dkml-cross-toolchain "https://github.com/diskuv/conf-dkml-cross-toolchain.git#$CONF_DKML_CROSS_TOOLCHAIN"
                section_end checkout-conf-dkml-cross-toolchain
            fi
        
            # patches necessary for Windows in diskuv-opam-repository
            #
            # - ocamlfind and ocamlbuild
            #
            # - dune-configurator (and hence Dune)
            # Dune 2.9.1 and 3.0.2 will fail to build jst-config.v0.14.1 because for jst-config/discover/discover.ml Dune does:
            #   cl -nologo -O2 -Gy- -MD    -I Z:/.opam_root-cached-8/installer-ocaml/lib/ocaml -o C:\Users\beckf\AppData\Local\Temp\build_f18aec_dune\ocaml-configurator4d3858\c-test-31\test.obj -c C:\Users\beckf\AppData\Local\Temp\build_f18aec_dune\ocaml-configurator4d3858\c-test-31\test.c advapi32.lib ws2_32.lib version.lib
            # instead of
            #   cl -nologo -O2 -Gy- -MD    -I Z:/.opam_root-cached-8/installer-ocaml/lib/ocaml /FoC:\Users\beckf\AppData\Local\Temp\build_f18aec_dune\ocaml-configurator4d3858\c-test-31\test.obj -c C:\Users\beckf\AppData\Local\Temp\build_f18aec_dune\ocaml-configurator4d3858\c-test-31\test.c advapi32.lib ws2_32.lib version.lib
            # with the (irrelevant) test.c file:
            #    #include <stdio.h>
            #    #include <caml/config.h>
            #
            #    #ifdef ARCH_BIG_ENDIAN
            #    const char *s0 = "BEGIN-0-true-END";
            #    #else
            #    const char *s0 = "BEGIN-0-false-END";
            #    #endif
            #
            #    #ifdef ARCH_SIXTYFOUR
            #    const char *s1 = "BEGIN-1-true-END";
            #    #else
            #    const char *s1 = "BEGIN-1-false-END";
            #    #endif
            #
            # The actual problem is dune-configurator ... we only have patches in Diskuv
            # repository up until 2.9.3. Need to upstream fix the problem.
            #
            # - ppx_expect; only patch is for v0.14.1. Need to upstream fix the problem.
            # - base; patches for v0.14.1/2/3. Need to upstream fix the problem.
            opamrun pin add --yes --no-action -k version base "${PIN_BASE}"
            opamrun pin add --yes --no-action -k version bigstringaf "${PIN_BIGSTRINGAF}"
            opamrun pin add --yes --no-action -k version core_kernel "${PIN_CORE_KERNEL}"
            opamrun pin add --yes --no-action -k version ctypes "${PIN_CTYPES}"
            opamrun pin add --yes --no-action -k version ctypes-foreign "${PIN_CTYPES_FOREIGN}"
            opamrun pin add --yes --no-action -k version curly "${PIN_CURLY}"
            opamrun pin add --yes --no-action -k version digestif "${PIN_DIGESTIF}"
            opamrun pin add --yes --no-action -k version dune "${PIN_DUNE}"
            opamrun pin add --yes --no-action -k version dune-configurator "${PIN_DUNE}"
            opamrun pin add --yes --no-action -k version ocamlbuild "${PIN_OCAMLBUILD}"
            opamrun pin add --yes --no-action -k version ocamlfind "${PIN_OCAMLFIND}"
            opamrun pin add --yes --no-action -k version ocp-indent "${PIN_OCP_INDENT}"
            opamrun pin add --yes --no-action -k version ppx_expect "${PIN_PPX_EXPECT}"
            opamrun pin add --yes --no-action -k version ptime "${PIN_PTIME}"
            opamrun pin add --yes --no-action -k version time_now "${PIN_TIME_NOW}"
        }
        
        section_begin opam-pins 'Opam pins'
        do_pins
        section_end opam-pins
        
        do_use_vsstudio() {
            case "$dkml_host_abi" in
            windows_*)
                section_begin use-vsstudio 'Use Visual Studio in dkml-* Opam packages (Windows)'
        
                # shellcheck disable=SC2153
                E_VS_DIR=$(escape_arg_as_ocaml_string "$VS_DIR")
                # shellcheck disable=SC2153
                E_VS_VCVARSVER=$(escape_arg_as_ocaml_string "$VS_VCVARSVER")
                # shellcheck disable=SC2153
                E_VS_WINSDKVER=$(escape_arg_as_ocaml_string "$VS_WINSDKVER")
                # shellcheck disable=SC2153
                E_VS_MSVSPREFERENCE=$(escape_arg_as_ocaml_string "$VS_MSVSPREFERENCE")
                # shellcheck disable=SC2153
                E_VS_CMAKEGENERATOR=$(escape_arg_as_ocaml_string "$VS_CMAKEGENERATOR")
        
                case "$(opamrun --version)" in
                2.0.*)
                    if [ "${in_docker}" = "true" ]; then
                        echo Opam 2.0 support in dockcross to use a portable opam var prefix not yet implemented
                        exit 67
                    fi
                    OP=$(opamrun var prefix)
                    OPSC=$OP/.opam-switch/switch-config
                    if grep setenv: "$OPSC"; then
                        echo "INFO: Updating switch-config. Old was:"
                        awk '{print ">> " $0}' "$OPSC"
        
                        awk '$1=="setenv:"{x=1} x==0{print} x==1 && $0=="]"{x=0}' "$OPSC" >"$OPSC".trimmed
                        mv "$OPSC".trimmed "$OPSC"
                    fi
                    echo 'setenv: [' >>"$OPSC"
                    echo '  [DKML_COMPILE_SPEC = "1"]' >>"$OPSC"
                    echo '  [DKML_COMPILE_TYPE = "VS"]' >>"$OPSC"
                    echo "  [DKML_COMPILE_VS_DIR = \"$E_VS_DIR\"]" >>"$OPSC"
                    echo "  [DKML_COMPILE_VS_VCVARSVER = \"$E_VS_VCVARSVER\"]" >>"$OPSC"
                    echo "  [DKML_COMPILE_VS_WINSDKVER = \"$E_VS_WINSDKVER\"]" >>"$OPSC"
                    echo "  [DKML_COMPILE_VS_MSVSPREFERENCE = \"$E_VS_MSVSPREFERENCE\"]" >>"$OPSC"
                    echo "  [DKML_COMPILE_VS_CMAKEGENERATOR = \"$E_VS_CMAKEGENERATOR\"]" >>"$OPSC"
                    echo "  [DKML_HOST_ABI = \"${dkml_host_abi}\"]" >>"$OPSC"
                    echo ']' >>"$OPSC"
                    cat "$OPSC" >&2 # print
                    ;;
                *)
                    opamrun option setenv= # reset
                    opamrun option setenv+='DKML_COMPILE_SPEC = "1"'
                    opamrun option setenv+='DKML_COMPILE_TYPE = "VS"'
                    opamrun option setenv+="DKML_COMPILE_VS_DIR = \"$E_VS_DIR\""
                    opamrun option setenv+="DKML_COMPILE_VS_VCVARSVER = \"$E_VS_VCVARSVER\""
                    opamrun option setenv+="DKML_COMPILE_VS_WINSDKVER = \"$E_VS_WINSDKVER\""
                    opamrun option setenv+="DKML_COMPILE_VS_MSVSPREFERENCE = \"$E_VS_MSVSPREFERENCE\""
                    opamrun option setenv+="DKML_COMPILE_VS_CMAKEGENERATOR = \"$E_VS_CMAKEGENERATOR\""
                    opamrun option setenv+="DKML_HOST_ABI = \"${dkml_host_abi}\""
                    opamrun option setenv # print
                    ;;
                esac
        
                # shellcheck disable=SC2016
                opamrun exec -- sh -c 'echo $VCToolsRedistDir'
        
                section_end use-vsstudio
                ;;
            esac
        }
        do_use_vsstudio
        
        do_install_compiler() {
            section_begin install-compiler "Install OCaml compiler"
            opamrun pin list
            # shellcheck disable=SC2086
            opamrun upgrade --yes dkml-base-compiler conf-dkml-cross-toolchain ${ocaml_options:-}
            section_end install-compiler
        }
        do_install_compiler
        
        do_summary() {
            section_begin summary "Summary"
            opamrun var
            opamrun exec -- ocamlc -config
            section_end summary
        }
        do_summary
        
        end_of_script

    - name: Prepare cache keys
      # An undocumented bug with GitHub Actions is that a space in the key
      # will "succeed" but it never gets restored. So we will hash a
      # user-friendly file instead.
      shell: bash
      run: |
        set -x
        echo '1-507384-${{ inputs.FDOPEN_OPAMEXE_BOOTSTRAP }}-${{ steps.full_matrix_vars.outputs.dkml_host_abi }}-${{ steps.full_matrix_vars.outputs.opam_abi }}-${{ steps.full_matrix_vars.outputs.bootstrap_opam_version }}' > .ci/sd4/cachekey.opam.binaries
        echo '1-${{ steps.full_matrix_vars.outputs.abi_pattern }}-${{ steps.full_matrix_vars.outputs.vsstudio_arch }}-${{ steps.full_matrix_vars.outputs.vsstudio_hostarch }}-${{ steps.full_matrix_vars.outputs.vsstudio_dir }}-${{ steps.full_matrix_vars.outputs.vsstudio_vcvarsver }}-${{ steps.full_matrix_vars.outputs.vsstudio_winsdkver }}-${{ steps.full_matrix_vars.outputs.vsstudio_msvspreference }}-${{ steps.full_matrix_vars.outputs.vsstudio_cmakegenerator }}' > .ci/sd4/cachekey.vsstudio
        echo '1-${{ inputs.OCAML_COMPILER }}-${{ inputs.DISKUV_OPAM_REPOSITORY }}-${{ inputs.DKML_COMPILER }}-${{ inputs.CONF_DKML_CROSS_TOOLCHAIN }}' > .ci/sd4/cachekey.ci.inputs

    # Bootstrapping Opam

    - name: Cache Opam bootstrap by OS
      uses: actions/cache@v3
      id: cache-sd4-bs
      with:
        path: .ci/sd4/bs
        key:
          "${{ inputs.CACHE_PREFIX }}_${{ runner.os }}-sd4-bs-${{ hashFiles('.ci/sd4/cachekey.opam.binaries') }}"

    # ------
    # BEGIN Docker (ManyLinux)
    #   We use buildx which can cache into GitHub Actions Cache (type=gha)

    - name: Set up Docker Buildx (ManyLinux)
      if: steps.full_matrix_vars.outputs.dockcross_image != ''
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Configure Docker (ManyLinux)
      if: steps.full_matrix_vars.outputs.dockcross_image != ''
      shell: bash
      run: |
        install -d .ci/sd4/dockcross-ctx
        printf 'FROM %s\nRUN echo done fetching image' '${{ steps.full_matrix_vars.outputs.dockcross_image }}' > .ci/sd4/dockcross-ctx/Dockerfile

    - name: Fetch dockcross image (ManyLinux)
      if: steps.full_matrix_vars.outputs.dockcross_image != ''
      uses: docker/build-push-action@v3
      with:
        context: .ci/sd4/dockcross-ctx
        builder: "${{ steps.buildx.outputs.name }}"
        load: true
        tags: dkml-${{ steps.full_matrix_vars.outputs.dockcross_image }}
        cache-from: type=gha,scope=${{ github.workflow }}
        cache-to: type=gha,mode=max,scope=${{ github.workflow }}

    # END Docker (ManyLinux)
    # ------

    - name: Cache Opam root by (host,target)
      uses: actions/cache@v3
      id: cache-sd4-opamroot
      with:
        path: |
          ${{ steps.full_matrix_vars.outputs.opam_root }}/config
          ${{ steps.full_matrix_vars.outputs.opam_root }}/dkml
          ${{ steps.full_matrix_vars.outputs.opam_root }}/repo
          ${{ steps.full_matrix_vars.outputs.opam_root }}/download-cache
          ${{ steps.full_matrix_vars.outputs.opam_root }}/.ci.root-init
          ${{ steps.full_matrix_vars.outputs.opam_root }}/.ci.repo-init
        key:
          c2_${{ inputs.CACHE_PREFIX }}_${{ env.DKML_VERSION }}_${{ steps.full_matrix_vars.outputs.abi_pattern }}-sd4-opamroot-${{ hashFiles('.ci/sd4/cachekey.opam.binaries') }}-${{ hashFiles('cachekey.ci.inputs') }}

    # The action/checkout steps used for pinning will re-use existing Git objects
    # because of caching
    - name: Cache Git checkouts of Opam pins by OS
      uses: actions/cache@v3
      id: cache-sd4-git
      with:
        path: .ci/sd4/g
        key:
          "${{ inputs.CACHE_PREFIX }}_${{ runner.os }}-sd4-git-${{ hashFiles('.ci/sd4/cachekey.ci.inputs') }}"

    # Checkout code

    - name: Checkout DKML code
      shell: bash
      env:
        # Push down inputs variables for GitHub/GitLab portable scripts
        VERBOSE:          "${{ inputs.VERBOSE }}"
      run: 'sh .ci/sd4/run-checkout-code.sh GITHUB_WORKSPACE "$GITHUB_WORKSPACE"'

    # Setup C compiler

    - name: Compile 'dkml' switch
      shell: bash
      env:
        # Push down inputs variables for GitHub/GitLab portable scripts
        #   When non-empty, instead of building the standard components from the
        #   central Opam repository, use the github/gitlab development repositories
        #   directly.
        FDOPEN_OPAMEXE_BOOTSTRAP:         "${{ inputs.FDOPEN_OPAMEXE_BOOTSTRAP }}"
        CONF_DKML_CROSS_TOOLCHAIN:        "${{ inputs.CONF_DKML_CROSS_TOOLCHAIN }}"
        DISKUV_OPAM_REPOSITORY:           "${{ inputs.DISKUV_OPAM_REPOSITORY }}"
        DKML_COMPILER:                    "${{ inputs.DKML_COMPILER }}"
        OCAML_COMPILER:                   "${{ inputs.OCAML_COMPILER }}"
        VERBOSE:                          "${{ inputs.VERBOSE }}"

        # autogen from global_env_vars.
        DEFAULT_DKML_COMPILER: '4.12.1-v1.0.2'
        PIN_BASE: 'v0.14.3'
        PIN_BIGSTRINGAF: '0.8.0'
        PIN_CORE_KERNEL: 'v0.14.2'
        PIN_CTYPES_FOREIGN: '0.19.2-windowssupport-r4'
        PIN_CTYPES: '0.19.2-windowssupport-r4'
        PIN_CURLY: '0.2.1-windows-env_r2'
        PIN_DIGESTIF: '1.0.1'
        PIN_DUNE: '2.9.3'
        PIN_OCAMLBUILD: '0.14.0'
        PIN_OCAMLFIND: '1.9.1'
        PIN_OCP_INDENT: '1.8.2-windowssupport'
        PIN_PPX_EXPECT: 'v0.14.1'
        PIN_PTIME: '0.8.6-msvcsupport'
        PIN_TIME_NOW: 'v0.14.0'
      run: |
        sh .ci/sd4/run-setup-dkml.sh GITHUB_WORKSPACE "$GITHUB_WORKSPACE"

        # Expose opamrun to remaining GitHub Action steps
        opamrunabs="$GITHUB_WORKSPACE/.ci/sd4/opamrun"
        if [ -x /usr/bin/cygpath ]; then opamrunabs=$(/usr/bin/cygpath -aw "$opamrunabs"); fi
        echo "$opamrunabs" >> $GITHUB_PATH
